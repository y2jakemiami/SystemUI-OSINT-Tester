import psutil
import socket
import platform
from PIL import Image, ImageDraw, ImageFont
from telebot import *
from datetime import datetime

TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
bot = telebot.TeleBot(TOKEN)

def get_system_info():
    uname = platform.uname()
    return {
        "system": uname.system,
        "node_name": uname.node,
        "release": uname.release,
        "version": str(uname.version)[:28],
        "machine": uname.machine,
        "processor": uname.processor
    }

def get_cpu_info():
    cpu_freq = psutil.cpu_freq()
    return {
        "cpu_count": psutil.cpu_count(logical=True),
        "cpu_usage": psutil.cpu_percent(interval=1),
        "cpu_freq_current": cpu_freq.current,
        "cpu_freq_min": cpu_freq.min,
        "cpu_freq_max": cpu_freq.max
    }

def get_memory_info():
    memory = psutil.virtual_memory()
    return {
        "total_memory": memory.total,
        "available_memory": memory.available,
        "used_memory": memory.used,
        "memory_percent": memory.percent
    }

def get_network_info():
    network_info = psutil.net_if_addrs()
    ip_addresses = {interface: [addr.address for addr in addresses if addr.family == socket.AF_INET] for interface, addresses in network_info.items()}
    return ip_addresses

def get_process_info():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
        try:
            processes.append(proc.info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    return processes[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ 10

def create_flowchart(data):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ –±–ª–æ–∫-—Å—Ö–µ–º—ã
    img = Image.open("template.png")
    draw = ImageDraw.Draw(img)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    font = ImageFont.truetype("arialmt.ttf")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±–ª–æ–∫–∞—Ö
    x_offsets = [50, 350, 650]  # –°–º–µ—â–µ–Ω–∏—è –ø–æ –æ—Å–∏ X –¥–ª—è —Ç—Ä–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
    y_offset = 50   # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    draw.text((x_offsets[0], y_offset), "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", fill="white", font=font)
    y_offset += 20
    for key, value in data.items():
        if key in ["system", "node_name", "release","machine", "processor", "version"]:
            draw.text((x_offsets[0], y_offset), f"{key.capitalize()}: {value}", fill="black", font=font)
            y_offset += 20

    # –°–±—Ä–æ—Å —Å–º–µ—â–µ–Ω–∏—è –ø–æ Y –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏
    y_offset = 50

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¶–ü–£ –∏ –ø–∞–º—è—Ç–∏)
    draw.text((x_offsets[1], y_offset), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¶–ü–£:", fill="white", font=font)
    y_offset += 20
    for key, value in data.items():
        if key in ["cpu_count", "cpu_usage", "cpu_freq_current", "cpu_freq_min", "cpu_freq_max"]:
            draw.text((x_offsets[1], y_offset), f"{key.replace('_', ' ').capitalize()}: {value}", fill="black", font=font)
            y_offset += 20

    draw.text((x_offsets[1], y_offset + 20), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏:", fill="white", font=font)
    y_offset += 40
    for key, value in data.items():
        if key in ["total_memory", "available_memory", "used_memory", "memory_percent"]:
            draw.text((x_offsets[1], y_offset), f"{key.replace('_', ' ').capitalize()}: {value / (1024 ** 2):.2f} MB" if 'memory' in key else f"{key.replace('_', ' ').capitalize()}: {value}", fill="black", font=font)
            y_offset += 20

    # –°–±—Ä–æ—Å —Å–º–µ—â–µ–Ω–∏—è –ø–æ Y –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏
    y_offset = 50

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏ (–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö)
    draw.text((x_offsets[2], y_offset), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:", fill="black", font=font)
    y_offset += 20
    for interface, addresses in data['network'].items():
        draw.text((x_offsets[2], y_offset), f"{interface}: {', '.join(addresses)}", fill="black", font=font)
        y_offset += 20

    draw.text((x_offsets[2], y_offset + 20), "–ü—Ä–æ—Ü–µ—Å—Å—ã:", fill="white", font=font)
    y_offset += 40
    for proc in data['processes']:
        draw.text((x_offsets[2], y_offset),
                  f"{proc['pid']}: {proc['name']} | CPU: {proc['cpu_percent']}% | –ü–∞–º—è—Ç—å: {proc['memory_info']} MB",
                  fill="black", font=font)
        y_offset += 20

    cur = datetime.now()

    draw.text((750, 600), f"{cur}", fill="black", font=font)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    img.save("flowchart_output.png")


@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç üíΩ"), types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå"))
    bot.send_message(message.chat.id, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {str(get_system_info())[35:58]}", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç üíΩ")
def tester(message):
    bot.send_message(message.chat.id, "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üíΩ ...")

    sys_info = get_system_info()
    cpu_info = get_cpu_info()
    mem_info = get_memory_info()
    net_info = get_network_info()
    processes = get_process_info()

    data = {
        **sys_info,
        **cpu_info,
        **mem_info,
        "network": net_info,
        "processes": processes
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫-—Å—Ö–µ–º—ã
    create_flowchart(data)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    report_message = (
            "=== –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===\n" +
            "\n".join([f"{key.capitalize()}: {value}" for key, value in sys_info.items()]) +
            "\n\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¶–ü–£ =‚öôÔ∏è=\n" +
            "\n".join([f"{key.replace('_', ' ').capitalize()}: {value}" for key, value in cpu_info.items()]) +
            "\n\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ =üíæ=\n" +
            "\n".join([
                f"{key.replace('_', ' ').capitalize()}: {value / (1024 ** 2):.2f} MB" if 'memory' in key else f"{key.replace('_', ' ').capitalize()}: {value}"
                for key, value in mem_info.items()]) +
            "\n\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ =üì°=\n" +
            "\n".join([f"{interface}: {', '.join(addresses)}" for interface, addresses in net_info.items()]) +
            "\n\n=== –ü—Ä–æ—Ü–µ—Å—Å—ã =üéõ=\n" +
            "\n".join([
                f"{proc['pid']}: {proc['name']} | CPU: {proc['cpu_percent']}% | –ü–∞–º—è—Ç—å: {proc['memory_info']} MB"
                for proc in processes])
    )
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç üíΩ"), types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    bot.send_message(message.chat.id, report_message, reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫-—Å—Ö–µ–º—ã
    with open("flowchart_output.png", 'rb') as photo:
        bot.send_photo(message.chat.id, photo)

@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå")
def stoper(message):
    cur = datetime.now()
    bot.send_message(message.chat.id, f'Bot was terminated at {cur} üîí')
    bot.stop_bot()
    return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
